@page "/"
@inject HttpClient httpClient
@inject NavigationManager navManager
@inject IJSRuntime jsr
@inject AccountService accountService
@inject TokenService tokenService

<PageTitle>Index</PageTitle>

<h1>Welcome!</h1>
@if(IsLoggedIn == false)
{
    <div class="log-in-form">
        <h3>Log in:</h3>
        <EditForm Model="@user" OnValidSubmit="Login">
            <div class="form-group">
                <label>Email</label>
                <input @bind="user.Email" class="form-control" />
                <ValidationMessage For="@(() => user.Email)" />
            </div>
            <div class="form-group">
                <label>Password</label>
                <input @bind="user.Password" class="form-control" />
                <ValidationMessage For="@(() => user.Password)" />
            </div>
            <button type="submit" class="btn btn-primary">Log in</button>
            <label id="error-message">@errorMessage</label>
        </EditForm>
    </div>
}
else
{
    <div class="logged-in">
        <h3>Logged in as: <span class="role-text">@role</span></h3>
        <a href="/weather">To weather</a>
    </div>
}


@code{
    public UserDto user = new();
    private string errorMessage = string.Empty;
    private bool IsLoggedIn = false;
    private string role = string.Empty;

    /// <summary>
    /// When page is initialized a token is checked for and validated.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        var token = await tokenService.CheckTokenValid();
        Console.WriteLine(token);
        if (!string.IsNullOrEmpty(token))
        {
            IsLoggedIn = true;
            role = tokenService.CheckRole(token);
            StateHasChanged();
        }
    }

    /// <summary>
    /// Executes the login, if succeeded a token is received and saved and the users role is extracted from the token.
    /// If log in not successfull no token is recieved and the user gets an error message.
    /// </summary>
    public async Task Login()
    {
        var result = await accountService.Login(user);

        var token = result.Content.ReadAsStringAsync().Result;

        if(result.StatusCode == System.Net.HttpStatusCode.OK && !string.IsNullOrEmpty(token))
        {
            errorMessage = "";
            IsLoggedIn = true;
            StateHasChanged();
            Console.WriteLine(token);
            var handler = new JwtSecurityTokenHandler();
            var jsontoken = handler.ReadJwtToken(token);
            var jwtToken = jsontoken as JwtSecurityToken;
            DateTime expirationDate = jsontoken.ValidTo.ToLocalTime();
            
            await tokenService.AddToken(token);
            role = tokenService.CheckRole(token);
            navManager.NavigateTo("/weather");
        }
        else
        {
            Console.WriteLine(result.StatusCode);
            if(result.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                errorMessage = "Email or password is incorrect!";
            }
            else
            {
                errorMessage = "Something went wrong, try again!";
            }
        }
    }
}

